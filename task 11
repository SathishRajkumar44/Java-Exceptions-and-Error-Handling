Java Exceptions and Error Handling

Task Description:

1. What are the four access modifiers available in Java and what is their significance in terms of class, method, and variable accessibility?
    Access modifiers in Java control the visibility of classes, methods, and variables. There are four access modifiers:

Public: The class, method, or variable is accessible by any other class.
Protected: The class, method, or variable is accessible within its package and by subclasses.
Default (no modifier): The class, method, or variable is accessible only within its package.
Private: The class, method, or variable is accessible only within the declared class.


2. What is the difference between Exception and error?

Exception vs Error:

Exception: Exceptions are events that occur during the execution of a program that disrupt the normal flow of instructions. 
They can be caught and handled using try-catch blocks.
Error: Errors are typically unrecoverable events that happen at runtime, outside the control of the application.
Examples include OutOfMemoryError or StackOverflowError. Usually, errors should not be caught or handled.

3. What is the difference between checked Exception and unchecked Exception?

Checked Exception vs Unchecked Exception:

Checked Exception: These are checked at compile time. The compiler forces you to either handle them using try-catch or declare that your method throws them 
using the throws clause. Examples include IOException.
Unchecked Exception: These are not checked at compile time. They usually extend RuntimeException. Examples include NullPointerException and ArrayIndexOutOfBoundsException.


4. Write a Java program that reads user input for two integers and performs division.
Handle the exception that is thrown when the second number is zero, and display an error message to the user.

import java.util.Scanner;

public class DivisionProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter the first number: ");
            int num1 = scanner.nextInt();

            System.out.print("Enter the second number: ");
            int num2 = scanner.nextInt();

            if (num2 == 0) {
                throw new ArithmeticException("Cannot divide by zero.");
            }

            int result = num1 / num2;
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("An error occurred.");
        } finally {
            scanner.close();
        }
    }
}




5. Write the code of ArrayIndexOutOfBoundsException & StringIndexOutOfBoundsException?

public class ArrayStringIndexExceptions {
    public static void main(String[] args) {
        //ArrayIndexOutOfBoundsException
        try {
            int[] array = new int[5];
            int element = array[10]; 
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: " + e.getMessage());
        }

        //StringIndexOutOfBoundsException
        try {
            String str = "Hello";
            char character = str.charAt(10); 
        } catch (StringIndexOutOfBoundsException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


6. You are building a login system for a website using Java. 
If the user enters an incorrect password, you want to display a message informing them of the error. How would you use exception handling to handle this situation?

ANSWER:
class IncorrectPasswordException extends Exception {
    IncorrectPasswordException(String message) {
        super(message);
    }
}

public class IncorrectPasswordHandling {
    public static void main(String[] args) {
        try {
            // Task 6: Handling Incorrect Password
            System.out.print("Enter your password: ");
            String userEnteredPassword = new Scanner(System.in).next();

            // Check the password
            if (!isPasswordCorrect(userEnteredPassword)) {
                throw new IncorrectPasswordException("Incorrect password");
            }

            System.out.println("Login successful!");
        } catch (IncorrectPasswordException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    // Dummy method to simulate password validation
    private static boolean isPasswordCorrect(String password) {
        return password.equals("correctpassword");
    }
}

7. Create a custom exception in Java called "InvalidAgeException" that is thrown when the user enters an age less than 18.
Implement exception handling in a Java program to catch the "InvalidAgeException" and display an error message.

ANSWER:
class InvalidAgeException extends Exception {
    InvalidAgeException(String message) {
        super(message);
    }
}

public class AgeValidation {
    public static void main(String[] args) {
        try {
            // Task 7: Creating and Handling InvalidAgeException
            int age = 15;
            if (age < 18) {
                throw new InvalidAgeException("Age must be 18 or older.");
            }
        } catch (InvalidAgeException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

8. Implement exception handling in a Java program that reads data from a file. If the file does not exist, throw a "FileNotFoundException" 
and display an error message to the user.

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class FileHandling {
    public static void main(String[] args) {
        try {
            // Task 8: Handling FileNotFoundException
            File file = new File("nonexistentfile.txt");
            Scanner scanner = new Scanner(file);

            // Read data from the file

            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error: File not found");
        }
    }
}

